using CodeChallenge.PartLengthCalculation.Answers.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeChallenge.PartLengthCalculation.CodeChallenge
{
    public static class PartLengthCalculator
    {
        /// <summary>
        /// This method will use the part callout information to calculate the part length in inches.  Close attention should be
        /// paid to the callout options for accurate length calculations
        /// </summary>
        /// <param name="part">The part object we will be evaluating for length</param>
        /// <returns>The final calculated part length from this method that will be compared to the Samtec calculation</returns>
        public static float DeterminePartLength(Part part)
        {
            float partLength = 0.0f;
            int banks = 0;

            try
            {

                // Implement the part length calculation here based on the part callout information
                // banks: every 26 positions constitutes a bank (ensure at least 1 bank)
                banks = Math.Max(1, part.NumberOfPositions / 26);

                // Longitud base 
                partLength = ((banks * .840f) - .020f);

                // GP: +0.23 
                if (part.HasOption("-GP"))
                    partLength += 0.51f;
                // PX4 (PC4/PT4): +0.54
                // NOT AVAILABLE WITH -A, -GP OR -K; available in positions 26, 52, 78
                if ((part.HasOption("-PC4") || part.HasOption("-PT4"))
                    && !part.HasOption("-A")
                    && !part.HasOption("-GP")
                    && !part.HasOption("-K")
                    && (part.NumberOfPositions == 26 || part.NumberOfPositions == 52 || part.NumberOfPositions == 78))
                {
                    partLength += 0.54f;
                }

                // PX8 (PC8/PT8): +0.855
                // NOT AVAILABLE WITH -A, -GP OR -K; available in positions 26, 52, 78
                if ((part.HasOption("-PC8") || part.HasOption("-PT8"))
                    && !part.HasOption("-A")
                    && !part.HasOption("-GP")
                    && !part.HasOption("-K")
                    && (part.NumberOfPositions == 26 || part.NumberOfPositions == 52 || part.NumberOfPositions == 78))
                {
                    partLength += 0.855f;
                }

                // RF1: +0.605 (NOT AVAILABLE WITH -A OR -GP; available in 26, 52, 78 positions)
                if (part.HasOption("-RF1")
                    && !part.HasOption("-A")
                    && !part.HasOption("-GP")
                    && (part.NumberOfPositions == 26 || part.NumberOfPositions == 52 || part.NumberOfPositions == 78))
                {
                    partLength += 0.605f;
                }
                // RF2: +1.105 (NOT AVAILABLE WITH -A OR -GP; available in 26, 52, 78 positions)
                if (part.HasOption("-RF2")
                    && !part.HasOption("-A")
                    && !part.HasOption("-GP")
                    && (part.NumberOfPositions == 26 || part.NumberOfPositions == 52 || part.NumberOfPositions == 78))
                {
                    partLength += 1.105f;
                }

                // RT1: +0.605
                // NOT AVAILABLE WITH -GP, -PCx OR -RFX; available in 26, 52, 78, 104 positions with -A according to prints
                if (part.HasOption("-RT1")
                    && part.HasOption("-A")
                    && !part.HasOption("-GP")
                    && !part.HasOption("-PC4")
                    && !part.HasOption("-PC8")
                    && !part.HasOption("-RF1")
                    && !part.HasOption("-RF2")
                    && (part.NumberOfPositions == 26 || part.NumberOfPositions == 52 || part.NumberOfPositions == 78 || part.NumberOfPositions == 104))
                {
                    partLength += 0.605f;
                }

                // -DP does not affect length
            }
            catch (Exception ex)
            {
                throw;
            }

            return partLength;
        }
    }
}